@startuml
!include ../../../../../../../StylesForDiagrams.puml

package cleanmovie as "com.vanskarner.cleanmovie.ui"{
    class MovieModelMapper{
        - MovieModelMapper()
        + {static} convert(MovieDetailDS): MovieDetailModel
        + {static} convert(MovieDetailModel): MovieDetailDS
        + {static} convert(List<MovieBasicDS>): List<MovieBasicModel>
        + {static} convert(List<MovieBasicModel>,CharSequence):  MoviesFilterDS
        - {static} convert(MovieBasicDS): MovieBasicModel
        - {static} convert(MovieBasicModel): MovieBasicDS
    }
    interface BasePresenter<<interface>>{
        + asyncCancel(): void
    }
    class MovieDetailModel<<(D,orange)Data Structure>>
    class MovieBasicModel<<(D,orange)Data Structure>>
    class ViewErrorFilter{
        + ViewErrorFilter(Map<Class<?>, Provider<ErrorView<?>>>,ErrorView<?>)
        + filter(Throwable): ErrorView<?>
    }
    class ErrorDialog{
        - {static} TAG: String = "ErrorDialog"
        - action: Runnable
        + ErrorDialog()
        + setError(ErrorView<?>,Runnable): void
        + show(FragmentManager): void
    }
    together {
        interface ErrorView<T><<interface>>{
            + setupView(Runnable): T
        }
        class FavoritesLimitError
        class NoInternetError
        class NotFoundError
        class ServerError
        class ServiceUnavailableError
        class UnauthorisedError
        class UnknownError
    }
    together {
        interface FavoritesContractView<<interface>> {
            + showFavorites(List<MovieBasicModel>): void
            + showFavoriteDetail(MovieDetailModel):void
            + setNotFavorites(boolean): void
            + showError(ErrorView<?>): void
            + showRemovedItems(int): void
        }
        interface FavoritesContractPresenter<<interface>> {
            + getFavorites(): void
            + getFavoriteDetail(int): void
            + deleteFavorites(): void
        }
        class FavoritesFragment{
            ~ singleAdapter: SingleAdapter
            ~ binding: FavoritesFragmentBinding
            + showFavorites(List<MovieBasicModel>): void
            + showFavoriteDetail(MovieDetailModel):void
            + setNotFavorites(boolean): void
            + showError(ErrorView<?>): void
            + showRemovedItems(int): void
            - onClickTrashMenuItem(MenuItem): boolean
            - onClickFavoriteItem(View): void
        }
        class FavoritesPresenter{
            - movieServices: MovieServices
            + FavoritesPresenter(FavoritesContractView,
            MovieServices,ViewErrorFilter)
            + getFavorites(): void
            + getFavoriteDetail(int): void
            + deleteFavorites(): void
            + asyncCancel(): void
        }
        class DeleteFavoritesDialog{
            - {static}TAG: String = "DeleteFavoritesDialog"
            - onAccept: DialogInterface.OnClickListener
            + DeleteFavoritesDialog()
            + setOnAccept(DialogInterface.OnClickListener): void
            + show(FragmentManager): void
        }
        class FavoritesBindAdapter{
            - onClickItem: View.OnClickListener
            + FavoritesBindAdapter()
            + setOnClickItem(View.OnClickListener): void
        }
        class FavoritesDetailDialog{
            - {static} TAG: String = "FavoritesDetailDialog"
            - binding: FavoriteDetailDialogBinding
            + FavoritesDetailDialog()
            + setModel(MovieDetailModel): void
            + show(FragmentManager): void
        }
    }
    together {
        class Pagination
        class RxSearchView{
            -{static} TIMEOUT: int = 350
            - RxSearchView()
            ~{static} setFilter(SearchView,Consumer<String>): Disposable
            -{static} getRxOnQueryTextListener(SearchView): Observable<String>
        }
        class UpcomingBindAdapter{
            - onClickItem: View.OnClickListener
            + UpcomingBindAdapter()
            + setOnClickItem(View.OnClickListener): void
        }
        interface UpcomingContractView<<interface>>{
            + setSearchView(boolean): void
            + setInitialProgress(boolean): void
            + setPagingProgress(boolean): void
            + enableScroll(): void
            + paginate(): void
            + showUpcoming(List<MovieBasicModel>): void
            + showError(ErrorView<?>): void
        }
        interface UpcomingContractPresenter<<interface>>{
            + initialLoad(int): void
            + loadMoreItems(int,boolean): void
            + filter(CharSequence): void
        }
        class UpcomingFragment{
            ~ singleAdapter: SingleAdapter
            ~ compositeDisposable: CompositeDisposable
            ~ binding: UpcomingFragmentBinding
            + setSearchView(boolean): void
            + setInitialProgress(boolean): void
            + setPagingProgress(boolean): void
            + enableScroll(): void
            + paginate(): void
            + showUpcoming(List<MovieBasicModel>): void
            + showError(ErrorView<?>): void
            - configNavToolbar(): void
            - configSearchView(): void
            - configRecyclerView(): void
            - onClickUpcomingItem(View): void
            - configFilter(): void
            - getSearchView(): SearchView
        }
        class UpcomingPresenter{
            - movieServices: MovieServices
            + UpcomingPresenter(UpcomingContractView, MovieServices,
            List<MovieBasicModel>,List<MovieBasicModel>,ViewErrorFilter)
            + initialLoad(int): void
            + loadMoreItems(int,boolean): void
            + filter(CharSequence): void
            + asyncCancel(): void
            - addItems(List<MovieBasicModel>): void
        }
    }
    together {
        interface UpcomingDetailContractView<<interface>>{
            + setReadyViews(boolean): void
            + setMarkedAsFavorite(boolean): void
            + showUpcomingDetail(MovieDetailModel): void
            + showError(ErrorView<?>): void
        }
        interface UpcomingDetailContractPresenter<<interface>>{
            + initialAction(int): void
            + actionFavoriteMovie(MovieDetailModel): void
        }
        class UpcomingDetailFragment{
            ~ binding: UpcomingDetailFragmentBinding
            + setReadyViews(boolean): void
            + setMarkedAsFavorite(boolean): void
            + showUpcomingDetail(MovieDetailModel): void
            + showError(ErrorView<?>): void
            - configNavToolbar(): void
            - onClickHeartMenuItem(MenuItem): boolean
            - getMovieId(): int
            - toBase64(ImageView): String
        }
        class UpcomingDetailPresenter{
            - movieServices: MovieServices
            + UpcomingDetailPresenter(UpcomingDetailContractView,
            MovieServices,ViewErrorFilter)
            + initialAction(int): void
            + actionFavoriteMovie(MovieDetailModel): void
            + asyncCancel(): void
        }
    }
}

ErrorView <|.. FavoritesLimitError
ErrorView <|.. NoInternetError
ErrorView <|.. NotFoundError
ErrorView <|.. ServerError
ErrorView <|.. ServiceUnavailableError
ErrorView <|.. UnauthorisedError
ErrorView <|.. UnknownError
ViewErrorFilter --> "1..*" ErrorView: -mapError
ViewErrorFilter --> ErrorView: -defaultError
ErrorDialog --> "1" ErrorView: -errorView
MovieDetailModel --> MovieBasicModel

/'Favorites Feature'/
FavoritesContractPresenter <|.. FavoritesPresenter
FavoritesContractView <-- FavoritesPresenter: -view
FavoritesPresenter --> ViewErrorFilter: - viewErrorFilter
FavoritesPresenter ..> MovieModelMapper
FavoritesContractView <|.. FavoritesFragment
FavoritesContractPresenter <-- FavoritesFragment: ~presenter
FavoritesFragment --> FavoritesBindAdapter: ~ favoritesBindAdapter
FavoritesFragment --> DeleteFavoritesDialog: ~deleteFavorites
FavoritesFragment --> FavoritesDetailDialog: ~detailDialog
FavoritesFragment --> ErrorDialog: ~errorDialog
FavoritesDetailDialog --> MovieDetailModel: -model
BasePresenter <|-- FavoritesContractPresenter

/'Upcoming Feature'/
UpcomingContractPresenter <|.. UpcomingPresenter
UpcomingContractPresenter <-- UpcomingFragment: ~presenter
UpcomingPresenter --> "0..*" MovieBasicModel: -upcomingList
UpcomingPresenter --> "0..*" MovieBasicModel: -fullUpcomingList
UpcomingPresenter --> ViewErrorFilter: -viewErrorFilter
UpcomingPresenter ..> MovieModelMapper
UpcomingContractView <|.. UpcomingFragment
UpcomingContractView <-- UpcomingPresenter: -view
UpcomingFragment --> Pagination:  ~pagination
UpcomingFragment --> UpcomingBindAdapter:  ~upcomingBindAdapter
UpcomingFragment --> ErrorDialog: ~errorDialog
UpcomingFragment --> RxSearchView: ~rxSearchView
BasePresenter <|-- UpcomingContractPresenter

/'UpcomingDetail Feature'/
UpcomingDetailContractPresenter <|.. UpcomingDetailPresenter
UpcomingDetailContractPresenter <-- UpcomingDetailFragment: ~presenter
UpcomingDetailPresenter ..> MovieModelMapper
UpcomingDetailPresenter --> ViewErrorFilter: - viewErrorFilter
UpcomingDetailContractView <|.. UpcomingDetailFragment
UpcomingDetailContractView <-- UpcomingDetailPresenter: -view
UpcomingDetailFragment --> ErrorDialog: ~errorDialog
BasePresenter <|-- UpcomingDetailContractPresenter

MovieDetailModel <.. MovieModelMapper
MovieBasicModel <.. MovieModelMapper

hide MovieModelMapper attributes
hide ViewErrorFilter attributes
hide FavoritesLimitError members
hide NoInternetError members
hide NotFoundError members
hide ServerError members
hide ServiceUnavailableError members
hide UnauthorisedError members
hide UnknownError members
hide <<Data Structure>> members
hide Pagination members
hide RxSearchView members
hide UpcomingBindAdapter members
hide DeleteFavoritesDialog members
hide FavoritesBindAdapter members
hide FavoritesDetailDialog members
skinparam Linetype ortho
@enduml