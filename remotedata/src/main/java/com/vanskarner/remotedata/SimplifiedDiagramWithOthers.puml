@startuml
!include ../../../../../../../diagrams_main_concepts/VanskarnerStyle.puml

/'Specification'/
package remotedata as "com.vanskarner.remotedata"{
    class MovieRemoteRxRepository
    class MovieDeserializer
    class MovieDTO<<(D,orange)Data Structure>>
    class MovieRemoteDataMapper
    interface MovieApiClient<<interface>>
    class MoviesResultDTO<<(D,orange)Data Structure>>
    class RemoteDataErrorFilter
    abstract class RemoteError<<abstract>>
    class Unauthorised
    class NotFound
    class Server
    class ServiceUnavailable
    class NoInternet
    class RemoteErrorInterceptor
}
package entities as "com.vanskarner.entities"{
    entity MovieBO
}
package usecases as "com.vanskarner.usecases"{
    interface MovieRemoteRepository<<interface>>
}
package core as "com.vanskarner.core"{
    interface Result<T><<interface>>
    interface FutureResult<T><<interface>>
    interface RxFutureFactory<<interface>>
}

/'Relations'/
MovieRemoteRxRepository --> MovieApiClient: -service
MovieRemoteRxRepository ..> MovieRemoteDataMapper
MovieApiClient ..> MovieDTO
MovieApiClient ..> MoviesResultDTO
MovieRemoteDataMapper ..> MovieDTO
MovieRemoteDataMapper ..> MovieBO: <<use>>
MovieDeserializer ..> MovieDTO
MoviesResultDTO -> "0..*" MovieDTO: ~results

RemoteDataErrorFilter --> "1..*" RemoteError: - mapError
RemoteDataErrorFilter --> RemoteError: - defaultError
RemoteError <|-- NoInternet
RemoteError <|-- NotFound
RemoteError <|-- Server
RemoteError <|-- ServiceUnavailable
RemoteError <|-- Unauthorised
RemoteErrorInterceptor --> RemoteDataErrorFilter: - errorFilter

MovieRemoteRepository <|.. MovieRemoteRxRepository
MovieBO <.. MovieRemoteRepository: <<use>>

RxFutureFactory <.. MovieRemoteRxRepository: <<use>>
Result <.. MovieRemoteRepository: <<use>>
FutureResult <.. MovieRemoteRepository: <<use>>

/'Visualization'/
hide members
@enduml