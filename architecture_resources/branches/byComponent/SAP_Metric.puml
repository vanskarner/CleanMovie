@startuml
!include ../../../architecture_resources/StylesForDiagrams.puml

title CALCULATING THE METRIC FOR SAP\n branch: package_by_componente_Main
/'Start: for core'/
component core {
    together{
        interface Result<T><<interface>>
        interface FutureResult<T><<interface>>
        interface FutureSimpleResult<<interface>>
        interface RxFutureFactory<<interface>>
        interface Consumer<<interface>>
        interface ExceptionFunction<<interface>>
    }
    together {
        class CompletableFutureSimpleResult
        class DefaultRxFutureFactory
        class SingleFutureResult
        class Failure
        class Success
    }
}
/'End: for core'/

/'Start: for movie'/
component movie {
    together {
        interface MovieLocalRepository<<interface>>
        interface MovieRemoteRepository<<interface>>
        interface MovieServices<<interface>>
        abstract MovieError<<abstract>>
        abstract BaseAsyncOutPutUseCase<<abstract>>
        abstract BaseAsyncUseCase<<abstract>>
        abstract BaseUseCase<<abstract>>
        interface MovieDao<<interface>>
        interface MovieApiClient<<interface>>
        abstract MovieRemoteError<<abstract>>
    }
    together {
        class MovieLocalRxRepository
        class MovieRemoteRxRepository
        class CheckFavoriteMovieUseCase
        class DeleteAllFavoriteMoviesUseCase
        class FindFavoriteMovieUseCase
        class FindUpcomingMovieUseCase
        class MovieDefaultServices
        class ShowFavoriteMoviesUseCase
        class ShowUpcomingMoviesUseCase
        class FilterUpcomingMoviesUseCase
        class ToggleMovieFavoriteUseCase
        class MovieDS<<(D,orange)Data Structure>>
        class MoviesDS<<(D,orange)Data Structure>>
        class MovieDetailDS<<(D,orange)Data Structure>>
        class MoviesFilterDS<<(D,orange)Data Structure>>
        entity MovieBO
        class MovieErrorFilter
        class MovieEntity<<(D,orange)Data Structure>>
        class MovieLocalDataMapper
        class MovieDeserializer
        class MovieDTO<<(D,orange)Data Structure>>
        class MovieRemoteDataMapper
        class Unauthorised as "MovieRemoteError.Unauthorised"
        class NotFound as "MovieRemoteError.NotFound"
        class Server as "MovieRemoteError.Server"
        class ServiceUnavailable as "MovieRemoteError.ServiceUnavailable"
        class NoInternet as "MovieRemoteError.NoInternet"
        class MovieRemoteErrorInterceptor
        class MoviesResultDTO<<(D,orange)Data Structure>>
        class RemoteDataErrorFilter
    }
}
/'End: for movie'/

/'Start: for ui'/
component ui{
    together {
        interface ErrorView<<interface>>
        interface FavoritesContractView<<interface>>
        interface FavoritesContractPresenter<<interface>>
        interface UpcomingContractView<<interface>>
        interface UpcomingContractPresenter<<interface>>
        interface UpcomingDetailContractView<<interface>>
        interface UpcomingDetailContractPresenter<<interface>>
        interface BasePresenter<<interface>>
    }
    together{
        class MovieViewMapper
        class FavoritesPresenter
        class ErrorDialog
        class FavoritesLimitError
        class NoInternetError
        class NotFoundError
        class ServerError
        class ServiceUnavailableError
        class UnauthorisedError
        class UnknownError
        class ViewErrorFilter
        class DeleteFavoritesDialog
        class FavoritesBindAdapter
        class FavoritesDetailDialog
        class FavoritesFragment
        class Pagination
        class RxSearchView
        class UpcomingBindAdapter
        class UpcomingFragment
        class UpcomingPresenter
        class UpcomingDetailFragment
        class UpcomingDetailPresenter
        class MovieDetailModel<<(D,orange)Data Structure>>
        class MovieModel<<(D,orange)Data Structure>>
        class BindingAdapters
        class MenuActivity
    }
}
/'End: for ui'/


hide members
/'skinparam LineType ortho'/
skinparam packageBackgroundColor white
left to right direction
@enduml