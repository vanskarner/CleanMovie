@startuml
!include ../../../../../../../../StylesForDiagrams.puml

/'Specification'/
package movie as "com.vanskarner.movie"{
    package businesslogic {
        class MovieDetailDS<<(D,orange)Data Structure>>
        class MovieBasicDS<<(D,orange)Data Structure>>
        class MoviesDS<<(D,orange)Data Structure>>
        class MoviesFilterDS<<(D,orange)Data Structure>>
        interface MovieServices<<interface>>
        class MovieDefaultServices
        class FilterUpcomingMoviesUseCase
        class ToggleMovieFavoriteUseCase
        class CheckFavoriteMovieUseCase
        class DeleteAllFavoriteMoviesUseCase
        class FindFavoriteMovieUseCase
        class ShowFavoriteMoviesUseCase
        class ShowUpcomingMoviesUseCase
        class FindUpcomingMovieUseCase
        together {
            interface MovieLocalRepository<<interface>>
            interface MovieRemoteRepository<<interface>>
        }
        class MovieMapper
        together {
            class MovieErrorFilter
            exception MovieError<<abstract>>
            exception FavoriteLimit
        }
        entity MovieBO
    }
    package persistence.local {
        interface MovieDao<<interface>>
        class MovieEntity<<(D,orange)Data Structure>>
        class MovieLocalRxRepository
        class MovieLocalDataMapper
    }
    package persistence.remote {
        class MovieRemoteRxRepository
        class MovieDeserializer
        class MovieDTO<<(D,orange)Data Structure>>
        class MovieRemoteDataMapper
        interface MovieApiClient<<interface>>
        class MoviesResultDTO<<(D,orange)Data Structure>>
        class RemoteDataErrorFilter
        exception MovieRemoteError<<abstract>>
        exception Unauthorised
        exception NotFound
        exception Server
        exception ServiceUnavailable
        exception NoInternet
        class MovieRemoteErrorInterceptor
    }

    package ui{
        interface ErrorView<T><<interface>>
        class ViewErrorFilter
        interface BasePresenter<<interface>>

        package favorites{
            class DefaultFavoritesPresenterFactory
            interface FavoritesContractView<<interface>>
            interface FavoritesContractPresenter<<interface>>
            class FavoritesPresenter
            interface FavoritesPresenterFactory<<interface>>

            FavoritesPresenterFactory <|. DefaultFavoritesPresenterFactory
            FavoritesPresenterFactory ..> FavoritesContractPresenter
            FavoritesContractPresenter <|.. FavoritesPresenter
            FavoritesContractView <-- FavoritesPresenter
            FavoritesContractView ..> ErrorView
            FavoritesPresenter ..> MovieServices
            FavoritesPresenter ..> ViewErrorFilter
        }
        package upcoming{
            class DefaultUpcomingPresenterFactory
            interface UpcomingContractView<<interface>>
            interface UpcomingContractPresenter<<interface>>
            class UpcomingPresenter
            interface UpcomingPresenterFactory<<interface>>

            UpcomingPresenterFactory <|. DefaultUpcomingPresenterFactory
            UpcomingPresenterFactory ..> UpcomingContractPresenter
            UpcomingContractPresenter <|.. UpcomingPresenter
            UpcomingContractView <-- UpcomingPresenter
            UpcomingContractView ..> ErrorView
            UpcomingPresenter ..> MovieServices
            UpcomingPresenter ..> ViewErrorFilter
        }
        package upcomingDetail{
            class DefaultUpcomingDetailPresenterFactory
            interface UpcomingDetailContractView<<interface>>
            interface UpcomingDetailContractPresenter<<interface>>
            class UpcomingDetailPresenter
            interface UpcomingDetailPresenterFactory<<interface>>

            UpcomingDetailPresenterFactory <|. DefaultUpcomingDetailPresenterFactory
            UpcomingDetailPresenterFactory ..> UpcomingDetailContractPresenter
            UpcomingDetailContractPresenter <|.. UpcomingDetailPresenter
            UpcomingDetailContractView <-- UpcomingDetailPresenter
            UpcomingDetailContractView ..> ErrorView
            UpcomingDetailPresenter ..> MovieServices
            UpcomingDetailPresenter ..> ViewErrorFilter
        }
        ViewErrorFilter --> ErrorView
        ViewErrorFilter --> "1..*" ErrorView
        FavoritesContractPresenter ...|> BasePresenter
        UpcomingDetailContractPresenter ...|> BasePresenter
        UpcomingContractPresenter ...|> BasePresenter
    }
}

/'Relations'/
MovieServices ..> MoviesDS
MovieServices ..> MovieDetailDS
MovieServices ..> MoviesFilterDS
MoviesDS --> "0..*" MovieBasicDS
MoviesFilterDS --> "0..*" MovieBasicDS
MoviesFilterDS --> "0..*" MovieBasicDS

MovieDefaultServices .left.|> MovieServices
MovieDefaultServices --> ShowUpcomingMoviesUseCase
MovieDefaultServices --> FindUpcomingMovieUseCase
MovieDefaultServices --> ShowFavoriteMoviesUseCase
MovieDefaultServices --> FindFavoriteMovieUseCase
MovieDefaultServices --> CheckFavoriteMovieUseCase
MovieDefaultServices --> ToggleMovieFavoriteUseCase
MovieDefaultServices --> DeleteAllFavoriteMoviesUseCase
MovieDefaultServices --> FilterUpcomingMoviesUseCase

CheckFavoriteMovieUseCase --> MovieLocalRepository
ToggleMovieFavoriteUseCase --> MovieLocalRepository
DeleteAllFavoriteMoviesUseCase --> MovieLocalRepository
FindFavoriteMovieUseCase --> MovieLocalRepository
ShowFavoriteMoviesUseCase --> MovieLocalRepository
ShowUpcomingMoviesUseCase --> MovieRemoteRepository
FindUpcomingMovieUseCase --> MovieRemoteRepository

ShowUpcomingMoviesUseCase ..> MovieMapper
FindUpcomingMovieUseCase ..> MovieMapper
ShowFavoriteMoviesUseCase ..> MovieMapper
FindFavoriteMovieUseCase ..> MovieMapper

MovieMapper ..> MovieDetailDS
MovieDetailDS --> MovieBasicDS
MovieMapper ..> MovieBO
MovieMapper ..> MoviesDS

ToggleMovieFavoriteUseCase --> MovieErrorFilter
MovieErrorFilter --> "1..*" MovieError
MovieError <|-- FavoriteLimit

MovieLocalRepository ..> MovieBO
MovieRemoteRepository ..> MovieBO
/'Relations - local-data:start'/
MovieLocalRxRepository --> MovieDao
MovieDao ..> MovieEntity
MovieLocalRxRepository ..> MovieLocalDataMapper
MovieLocalDataMapper ..> MovieEntity
MovieLocalDataMapper ..> MovieBO
MovieLocalRxRepository ..|> MovieLocalRepository
/'Relations - local-data:end'/

/'Relations - remote-data:start'/
MovieRemoteRxRepository ..|> MovieRemoteRepository
MovieRemoteRxRepository --> MovieApiClient
MovieRemoteRxRepository ..> MovieRemoteDataMapper
MovieApiClient ..> MovieDTO
MovieApiClient ..> MoviesResultDTO
MovieRemoteDataMapper ..> MovieDTO
MovieRemoteDataMapper ..> MovieBO
MovieDeserializer ..> MovieDTO
MoviesResultDTO -> "0..*" MovieDTO
RemoteDataErrorFilter --> "1..*" MovieRemoteError
RemoteDataErrorFilter --> "1" MovieRemoteError
MovieRemoteError <|-- NoInternet
MovieRemoteError <|-- NotFound
MovieRemoteError <|-- Server
MovieRemoteError <|-- ServiceUnavailable
MovieRemoteError <|-- Unauthorised
MovieRemoteErrorInterceptor -> RemoteDataErrorFilter
/'Relations - remote-data:end'/

/'Visualization'/
hide members
skinparam LineType ortho
@enduml